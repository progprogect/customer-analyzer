name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: customer_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd backend
        npm run test:coverage
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: customer_analyzer_test
        DB_USER: test_user
        DB_PASSWORD: test_password
    
    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm run test:coverage -- --coverage --watchAll=false
      env:
        CI: true
    
    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  ml-services-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install ML Dependencies
      run: |
        cd ml-services
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Run ML Tests
      run: |
        cd ml-services
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload ML Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./ml-services/coverage.xml
        flags: ml-services
        name: ml-services-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ml-services-tests]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: customer_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Dependencies
      run: |
        cd backend && npm ci
        cd ../ml-services && pip install -r requirements.txt
        pip install pytest requests
    
    - name: Start Services
      run: |
        # Запускаем Backend в фоне
        cd backend
        npm run start:test &
        BACKEND_PID=$!
        
        # Запускаем ML Services в фоне
        cd ../ml-services
        python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        ML_PID=$!
        
        # Ждем запуска сервисов
        sleep 30
        
        echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
        echo "ML_PID=$ML_PID" >> $GITHUB_ENV
    
    - name: Wait for Services
      run: |
        # Ждем, пока сервисы станут доступными
        timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Run Integration Tests
      run: |
        cd tests/integration
        python -m pytest test_api_integration.py -v
    
    - name: Stop Services
      run: |
        kill $BACKEND_PID $ML_PID || true

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ml-services-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
        npm install --save-dev cypress
    
    - name: Run Cypress E2E Tests
      run: |
        cd frontend
        npm run cypress:run
      env:
        CYPRESS_BASE_URL: http://localhost:3000
        CYPRESS_API_URL: http://localhost:3001

  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Security Audit (Backend)
      run: |
        cd backend
        npm audit --audit-level moderate
    
    - name: Run Security Audit (Frontend)
      run: |
        cd frontend
        npm audit --audit-level moderate
    
    - name: Run Safety Check (ML Services)
      run: |
        cd ml-services
        pip install safety
        safety check -r requirements.txt

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ml-services-tests, integration-tests, e2e-tests, security-tests]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ML Services Tests | ${{ needs.ml-services-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
