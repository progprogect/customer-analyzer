version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: customer_analyzer_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-customer_analyzer}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    secrets:
      - db_password
    networks:
      - customer_analyzer_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-customer_analyzer}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: customer_analyzer_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    secrets:
      - redis_password
    networks:
      - customer_analyzer_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: customer_analyzer_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-customer_analyzer}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD_FILE: /run/secrets/db_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      TELEGRAM_BOT_TOKEN_FILE: /run/secrets/telegram_bot_token
      ML_API_URL: http://ml-services:8000
      LOG_LEVEL: info
    volumes:
      - backend_logs:/app/logs
    secrets:
      - db_password
      - redis_password
      - jwt_secret
      - telegram_bot_token
    networks:
      - customer_analyzer_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ML Services
  ml-services:
    build:
      context: ./ml-services
      dockerfile: Dockerfile.prod
    container_name: customer_analyzer_ml
    restart: unless-stopped
    environment:
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-customer_analyzer}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD_FILE: /run/secrets/db_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
      MODEL_STORAGE_PATH: /app/models
      LOG_LEVEL: info
    volumes:
      - ml_models:/app/models
      - ml_logs:/app/logs
      - ml_data:/app/data
    secrets:
      - db_password
      - redis_password
    networks:
      - customer_analyzer_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: customer_analyzer_frontend
    restart: unless-stopped
    environment:
      NGINX_WORKER_PROCESSES: auto
      NGINX_WORKER_CONNECTIONS: 1024
    networks:
      - customer_analyzer_network
    depends_on:
      - backend
      - ml-services
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: customer_analyzer_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - customer_analyzer_network
    depends_on:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: customer_analyzer_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - customer_analyzer_network
    ports:
      - "9090:9090"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: customer_analyzer_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: http://localhost:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    secrets:
      - grafana_password
    networks:
      - customer_analyzer_network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  # Logging - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: customer_analyzer_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - customer_analyzer_network
    ports:
      - "9200:9200"

  # Logging - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: customer_analyzer_logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - backend_logs:/var/log/backend:ro
      - ml_logs:/var/log/ml:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - customer_analyzer_network
    depends_on:
      - elasticsearch

  # Logging - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: customer_analyzer_kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - customer_analyzer_network
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

# Secrets
secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  telegram_bot_token:
    file: ./secrets/telegram_bot_token.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  ml_models:
    driver: local
  ml_logs:
    driver: local
  ml_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Networks
networks:
  customer_analyzer_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
