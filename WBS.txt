## **WBS (Иерархическая структура работ): Система аналитики и персонализированных рекомендаций (Версия 1.1)**

#### **Этап 1: Проектирование и подготовка (Design & Setup)**

Этот этап закладывает фундамент для всего проекта.

* **1.1. Разработка архитектуры системы** ✅ **ВЫПОЛНЕНО** (20.01.2025)
    * **Описание:** Определение технологического стека, проектирование взаимодействия между компонентами (БД, Backend, ML-сервисы, Telegram Bot, Frontend), описание потоков данных.
    * **Связь с FR:** Влияет на все требования.
    * **Критерии приемки (Acceptance Criteria):**
        * ✅ Утверждена и задокументирована диаграмма архитектуры (например, с использованием C4 Model).
        * ✅ Финально выбран технологический стек (языки, фреймворки, библиотеки).
        * ✅ Создана и согласована диаграмма потоков данных (Data Flow Diagram).

* **1.2. Настройка рабочего окружения** ✅ **ВЫПОЛНЕНО** (20.01.2025)
    * **Описание:** Создание репозиториев в системе контроля версий (Git) https://github.com/progprogect/customer-analyzer.git.
    * **Связь с FR:** Инфраструктурная задача, влияет на все требования.
    * **Критерии приемки:**
        * ✅ Создан Git-репозиторий для Backend, Frontend, ML-кода.
    * **Результат:** Создана полная структура проекта с конфигурационными файлами, Docker Compose, и первым коммитом.

* **1.3. Развертывание и настройка БД PostgreSQL** ✅ **ВЫПОЛНЕНО** (20.01.2025)
    * **Описание:** Установка и настройка сервера PostgreSQL. Создание пользователей и прав доступа.
    * **Связь с FR:** `FR-1.1`
    * **Критерии приемки:**
        * ✅ Сервер PostgreSQL доступен из dev-окружения приложения.
        * ✅ Созданы роли для приложения с необходимыми правами (чтение/запись).
        * ✅ Настроены бэкапы базы данных.
    * **Результат:** Настроена PostgreSQL с полной схемой данных, пользователями, индексами, функциями и системой бэкапов.

* **1.4. Создание и применение схемы БД** ✅ **ВЫПОЛНЕНО** (20.01.2025)
    * **Описание:** Написание и применение миграционных скриптов для создания таблиц (`users`, `products`, `events`, `user_metrics`) в соответствии с Приложением А.
    * **Связь с FR:** `FR-1.4`
    * **Критерии приемки:**
        * ✅ Миграционные скрипты успешно выполнены в dev-БД.
        * ✅ Структура таблиц в БД полностью соответствует модели данных из документации.
        * ✅ Все связи (foreign keys) и ограничения (constraints) установлены корректно.
    * **Результат:** Схема БД создана и валидирована. Создан отчет соответствия требованиям FR-1.4.

* **1.5. Генерация и наполнение БД тестовыми данными (Новая задача)**
    * **Описание:** Создание скрипта для генерации синтетических данных (пользователи, продукты, события) и заполнение ими базы данных для целей разработки и тестирования.
    * **Связь с FR:** Затрагивает все функциональные требования, так как данные необходимы для тестирования каждого модуля.
    * **Критерии приемки:**
        * ✅ Создан скрипт, который генерирует данные для всех основных таблиц.
        * ✅ База данных успешно наполнена достаточным для тестирования объемом данных (например, 1000+ пользователей, 100+ продуктов, 50,000+ событий).
        * ✅ Сгенерированные данные консистентны (например, нет событий для несуществующих пользователей или товаров).

---

#### **Этап 2: Сбор данных и базовый Backend (Data Ingestion & Core Backend)**

На этом этапе мы обеспечиваем поступление данных в систему и создаем API для работы с ними.

* **2.1. Реализация модуля подключения к БД**
    * **Описание:** Написание базового кода в Backend-приложении для подключения к PostgreSQL.
    * **Связь с FR:** `FR-1.1`
    * **Критерии приемки:**
        * ✅ Backend-приложение успешно устанавливает соединение с БД при старте.
        * ✅ Соединение корректно переустанавливается в случае обрыва связи.

* **2.2. Разработка ETL-скрипта для исторических данных**
    * **Описание:** Создание скрипта для разовой загрузки данных о пользователях, продуктах и событиях из внешних источников (например, CSV-файлов или другой БД) в нашу PostgreSQL.
    * **Связь с FR:** `FR-1.2`
    * **Критерии приемки:**
        * ✅ Скрипт успешно загружает тестовый набор данных без ошибок.
        * ✅ Данные в таблицах `users`, `products`, `events` корректно сопоставлены.

* **2.3. Реализация логирования событий от Telegram-бота**
    * **Описание:** Создание API-эндпоинта, который будет принимать данные от Telegram-бота и сохранять их в таблицу `events`.
    * **Связь с FR:** `FR-1.3`
    * **Критерии приемки:**
        * ✅ При получении запроса от бота (например, пользователь нажал /start), в таблице `events` создается новая запись с `event_type = 'bot_command'`.
        * ✅ В таблице `users` создается или обновляется запись о пользователе.

---

#### **Этап 3: Разработка ML-моделей и аналитического ядра (ML & Analytics Core)**

Создаем "мозги" нашей системы. Эти задачи могут выполняться параллельно после завершения Этапа 2.

* **3.1. Разработка модуля сегментации пользователей**
    * **Описание:** Написание кода, который на основе данных из таблицы `events` проводит кластеризацию (K-means/DBSCAN) и обновляет поле `segment_id` в таблице `user_metrics`.
    * **Связь с FR:** `FR-2.1`
    * **Критерии приемки:**
        * ✅ Скрипт успешно выполняется на тестовых данных.
        * ✅ Для каждого пользователя в таблице `user_metrics` проставляется ID его сегмента.
        * ✅ Результаты кластеризации для тестового набора данных выглядят логично и объяснимо.

* **3.2. Разработка модели предсказания покупки**
    * **Описание:** Подготовка данных (feature engineering), обучение модели (Random Forest/XGBoost), сохранение артефакта модели. Создание скрипта для ежедневного прогноза и обновления поля `purchase_probability_30d`.
    * **Связь с FR:** `FR-2.2`
    * **Критерии приемки:**
        * ✅ Модель успешно обучается и сохраняется.
        * ✅ Скрипт прогнозирования корректно обновляет данные в `user_metrics.purchase_probability_30d`.
        * ✅ Качество модели на отложенной выборке (hold-out set) превышает базовый порог (например, AUC-ROC > 0.75).

* **3.3. Разработка модели предсказания оттока**
    * **Описание:** Аналогично 3.2, но для предсказания оттока. Обновление поля `churn_probability`.
    * **Связь с FR:** `FR-2.4`
    * **Критерии приемки:**
        * ✅ Модель успешно обучается и сохраняется.
        * ✅ Скрипт прогнозирования корректно обновляет данные в `user_metrics.churn_probability`.
        * ✅ Качество модели на отложенной выборке превышает базовый порог.

* **3.4. Разработка модуля расчета LTV**
    * **Описание:** Создание скрипта для расчета исторического и прогнозного LTV и обновления поля `ltv` в `user_metrics`.
    * **Связь с FR:** `FR-3.2`
    * **Критерии приемки:**
        * ✅ Скрипт успешно рассчитывает и обновляет LTV для всех пользователей.
        * ✅ Расчеты для тестовых пользователей верны и проверяемы вручную.

* **3.5. Разработка рекомендательной системы**
    * **Описание:** Реализация гибридного алгоритма (Collaborative + Content-based). Создание сервиса, который для любого `user_id` возвращает список рекомендованных `product_id`.
    * **Связь с FR:** `FR-2.3`
    * **Критерии приемки:**
        * ✅ Сервис возвращает список ID продуктов для заданного пользователя.
        * ✅ Рекомендации для "холодных" пользователей генерируются на основе популярных товаров (content-based).
        * ✅ Рекомендации для активных пользователей учитывают их историю и поведение похожих юзеров.

---

#### **Этап 4: Разработка Web-дашборда и Telegram-бота (Interfaces)**

Создаем интерфейсы для взаимодействия с системой.

* **4.1. Разработка Backend API для дашборда**
    * **Описание:** Создание REST API эндпоинтов для получения данных дашбордом (общая статистика, списки пользователей, детализация по пользователю и т.д.). Реализация аутентификации.
    * **Связь с FR:** `FR-4.1.1`, `FR-4.1.3`, `FR-4.1.4`
    * **Критерии приемки:**
        * ✅ Эндпоинт `/login` корректно аутентифицирует администратора.
        * ✅ Защищенные эндпоинты (например, `/api/users`) возвращают ошибку 401 для неавторизованных запросов.
        * ✅ Все необходимые для дашборда эндпоинты реализованы и возвращают корректные данные в формате JSON.

* **4.2. Разработка Frontend-части дашборда**
    * **Описание:** Верстка и программирование интерфейса дашборда на выбранном JS-фреймворке. Интеграция с Backend API.
    * **Связь с FR:** `FR-4.1.2`, `FR-4.1.3`, `FR-4.1.4`, `FR-4.1.5`, `FR-2.5.1`
    * **Критерии приемки:**
        * ✅ Реализована страница входа.
        * ✅ Главная страница корректно отображает все виджеты и графики, получая данные с бэкенда.
        * ✅ Страница пользователей позволяет искать и просматривать карточку клиента.
        * ✅ Интерфейс адаптируется под мобильные устройства.

* **4.3. Разработка логики Telegram-бота**
    * **Описание:** Реализация обработчиков команд (`/start`, `/recommendations`), обработка callback-запросов от inline-кнопок, отправка сообщений пользователям.
    * **Связь с FR:** `FR-4.2.1`, `FR-4.2.2`, `FR-4.2.3`
    * **Критерии приемки:**
        * ✅ Бот отвечает на команды `/start` и `/help`.
        * ✅ По команде `/recommendations` бот запрашивает рекомендации у бэкенда и отправляет их пользователю с inline-кнопками.
        * ✅ Нажатие на inline-кнопку (например, "Подробнее") корректно обрабатывается.

* **4.4. Реализация триггерных рассылок в боте**
    * **Описание:** Создание сервиса, который по расписанию проверяет условия (например, высокий `churn_probability`) и инициирует отправку сообщения пользователю через бота.
    * **Связь с FR:** `FR-4.2.4`
    * **Критерии приемки:**
        * ✅ Тестовому пользователю с `churn_probability > 0.8` автоматически отправляется реактивационное сообщение.
        * ✅ Система логирует все автоматические отправки.

---

#### **Этап 5: Тестирование, развертывание и завершение (Testing & Deployment)**

Финальный этап, гарантирующий качество и стабильность работы системы.

* **5.1. Интеграционное тестирование**
    * **Описание:** Тестирование взаимодействия всех компонентов системы: бот отправляет событие -> оно сохраняется в БД -> ML-модель его обрабатывает -> результат виден в дашборде.
    * **Связь с FR:** Все требования.
    * **Критерии приемки:**
        * ✅ Основные пользовательские сценарии (end-to-end) проходят без ошибок.
        * ✅ Данные корректно передаются между всеми компонентами системы.

* **5.2. Пользовательское приемочное тестирование (UAT)**
    * **Описание:** Демонстрация системы заказчику/аналитикам, получение обратной связи, исправление замечаний.
    * **Связь с FR:** Все требования.
    * **Критерии приемки:**
        * ✅ Заказчик подтвердил, что функционал дашборда и бота соответствует требованиям.
        * ✅ Составлен и закрыт список замечаний от UAT.

* **5.3. Развертывание на продакшн-сервере (Deployment)**
    * **Описание:** Настройка продакшн-окружения и перенос на него финальной версии приложения.
    * **Связь с FR:** Все требования.
    * **Критерии приемки:**
        * ✅ Система успешно развернута на продакшн-сервере.
        * ✅ Система доступна и стабильно работает.
        * ✅ Настроен мониторинг состояния системы (логи, метрики).

* **5.4. Создание технической документации и передача проекта**
    * **Описание:** Написание инструкций для администраторов, описание API, документирование архитектуры и ML-моделей.
    * **Связь с FR:** Все требования.
    * **Критерии приемки:**
        * ✅ Подготовлен пакет технической документации.
        * ✅ Проведено обучение для администраторов системы.
        * ✅ Проект официально передан в эксплуатацию.