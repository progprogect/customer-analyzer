#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å, –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import psycopg2
from datetime import datetime, timedelta
import json

class DataValidator:
    def __init__(self, db_config):
        self.db_config = db_config
        self.connection = None
        self.cursor = None

    def connect_to_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = psycopg2.connect(**self.db_config)
            self.cursor = self.connection.cursor()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            sys.exit(1)

    def disconnect_from_db(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()

    def validate_basic_counts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π...")
        
        queries = {
            'users': "SELECT COUNT(*) FROM app_schema.users;",
            'products': "SELECT COUNT(*) FROM app_schema.products;",
            'events': "SELECT COUNT(*) FROM app_schema.events;",
            'user_metrics': "SELECT COUNT(*) FROM app_schema.user_metrics;"
        }
        
        results = {}
        for table, query in queries.items():
            self.cursor.execute(query)
            count = self.cursor.fetchone()[0]
            results[table] = count
            print(f"   {table}: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if results['users'] < 100:
            print("‚ö†Ô∏è  –ú–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ–Ω—å—à–µ 100)")
        if results['products'] < 50:
            print("‚ö†Ô∏è  –ú–∞–ª–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–µ–Ω—å—à–µ 50)")
        if results['events'] < 10000:
            print("‚ö†Ô∏è  –ú–∞–ª–æ —Å–æ–±—ã—Ç–∏–π (–º–µ–Ω—å—à–µ 10,000)")
        
        return results

    def validate_data_consistency(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.cursor.execute("""
            SELECT COUNT(*) FROM app_schema.events e 
            LEFT JOIN app_schema.users u ON e.user_id = u.user_id 
            WHERE u.user_id IS NULL;
        """)
        orphan_events = self.cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∫—Ä–æ–º–µ bot_command)
        self.cursor.execute("""
            SELECT COUNT(*) FROM app_schema.events e 
            LEFT JOIN app_schema.products p ON e.product_id = p.product_id 
            WHERE e.product_id IS NOT NULL 
            AND e.event_type != 'bot_command'
            AND p.product_id IS NULL;
        """)
        orphan_product_events = self.cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ bot_command —Å–æ–±—ã—Ç–∏–π —Å product_id
        self.cursor.execute("""
            SELECT COUNT(*) FROM app_schema.events 
            WHERE event_type = 'bot_command' AND product_id IS NOT NULL;
        """)
        invalid_bot_events = self.cursor.fetchone()[0]
        
        print(f"   –°–æ–±—ã—Ç–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {orphan_events}")
        print(f"   –°–æ–±—ã—Ç–∏—è –±–µ–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {orphan_product_events}")
        print(f"   Bot –∫–æ–º–∞–Ω–¥—ã —Å product_id: {invalid_bot_events}")
        
        if orphan_events == 0 and orphan_product_events == 0 and invalid_bot_events == 0:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
            return True
        else:
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False

    def validate_data_quality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ telegram_id
        self.cursor.execute("""
            SELECT COUNT(*) FROM (
                SELECT telegram_id, COUNT(*) 
                FROM app_schema.users 
                GROUP BY telegram_id 
                HAVING COUNT(*) > 1
            ) duplicates;
        """)
        duplicate_telegram_ids = self.cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON –¥–∞–Ω–Ω—ã—Ö
        self.cursor.execute("""
            SELECT COUNT(*) FROM app_schema.users 
            WHERE profile_data IS NOT NULL 
            AND NOT (profile_data::text ~ '^[{}]');
        """)
        invalid_user_json = self.cursor.fetchone()[0]
        
        self.cursor.execute("""
            SELECT COUNT(*) FROM app_schema.products 
            WHERE attributes IS NOT NULL 
            AND NOT (attributes::text ~ '^[{}]');
        """)
        invalid_product_json = self.cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        self.cursor.execute("""
            SELECT COUNT(*) FROM app_schema.products 
            WHERE price < 0 OR price IS NULL;
        """)
        invalid_prices = self.cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤ user_metrics
        self.cursor.execute("""
            SELECT COUNT(*) FROM app_schema.user_metrics 
            WHERE churn_probability < 0 OR churn_probability > 1
            OR purchase_probability_30d < 0 OR purchase_probability_30d > 1;
        """)
        invalid_probabilities = self.cursor.fetchone()[0]
        
        print(f"   –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è telegram_id: {duplicate_telegram_ids}")
        print(f"   –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON –≤ users: {invalid_user_json}")
        print(f"   –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON –≤ products: {invalid_product_json}")
        print(f"   –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã: {invalid_prices}")
        print(f"   –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {invalid_probabilities}")
        
        quality_issues = (duplicate_telegram_ids + invalid_user_json + 
                         invalid_product_json + invalid_prices + invalid_probabilities)
        
        if quality_issues == 0:
            print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ª–∏—á–Ω–æ–µ")
            return True
        else:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {quality_issues} –ø—Ä–æ–±–ª–µ–º —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö")
            return False

    def analyze_user_behavior(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüë• –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.cursor.execute("""
            SELECT 
                CASE 
                    WHEN last_activity > NOW() - INTERVAL '30 days' THEN '–ê–∫—Ç–∏–≤–Ω—ã–µ (30 –¥–Ω–µ–π)'
                    WHEN last_activity > NOW() - INTERVAL '90 days' THEN '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (90 –¥–Ω–µ–π)'
                    ELSE '–ó–∞–±—ã—Ç—ã–µ (>90 –¥–Ω–µ–π)'
                END as user_status,
                COUNT(*) as count,
                ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as percentage
            FROM (
                SELECT user_id, MAX(event_timestamp) as last_activity
                FROM app_schema.events
                GROUP BY user_id
            ) user_activity
            GROUP BY user_status
            ORDER BY count DESC;
        """)
        
        print("   –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for row in self.cursor.fetchall():
            print(f"     {row[0]}: {row[1]} ({row[2]}%)")
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞
        self.cursor.execute("""
            SELECT 
                event_type,
                COUNT(*) as count,
                ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as percentage
            FROM app_schema.events
            WHERE event_type IN ('view', 'add_to_cart', 'purchase')
            GROUP BY event_type
            ORDER BY count DESC;
        """)
        
        print("   –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞:")
        for row in self.cursor.fetchall():
            print(f"     {row[0]}: {row[1]} ({row[2]}%)")

    def analyze_products(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        print("\nüõçÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.cursor.execute("""
            SELECT 
                category,
                COUNT(*) as count,
                ROUND(AVG(price), 2) as avg_price,
                ROUND(MIN(price), 2) as min_price,
                ROUND(MAX(price), 2) as max_price
            FROM app_schema.products
            GROUP BY category
            ORDER BY count DESC;
        """)
        
        print("   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for row in self.cursor.fetchall():
            print(f"     {row[0]}: {row[1]} —Ç–æ–≤–∞—Ä–æ–≤, —Ü–µ–Ω–∞ {row[2]}‚ÇΩ ({row[3]}-{row[4]}‚ÇΩ)")
        
        # –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        self.cursor.execute("""
            SELECT 
                p.name,
                p.category,
                COUNT(*) as purchases,
                SUM((e.properties->>'amount')::numeric) as revenue
            FROM app_schema.events e
            JOIN app_schema.products p ON e.product_id = p.product_id
            WHERE e.event_type = 'purchase'
            GROUP BY p.product_id, p.name, p.category
            ORDER BY purchases DESC
            LIMIT 5;
        """)
        
        print("   –¢–æ–ø-5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:")
        for row in self.cursor.fetchall():
            print(f"     {row[0]} ({row[1]}): {row[2]} –ø–æ–∫—É–ø–æ–∫, {row[3]}‚ÇΩ")

    def analyze_temporal_patterns(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        print("\nüìÖ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        # –°–æ–±—ã—Ç–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        self.cursor.execute("""
            SELECT 
                DATE_TRUNC('month', event_timestamp) as month,
                COUNT(*) as events,
                COUNT(DISTINCT user_id) as unique_users
            FROM app_schema.events
            GROUP BY month
            ORDER BY month DESC
            LIMIT 12;
        """)
        
        print("   –°–æ–±—ã—Ç–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º:")
        for row in self.cursor.fetchall():
            print(f"     {row[0].strftime('%Y-%m')}: {row[1]} —Å–æ–±—ã—Ç–∏–π, {row[2]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –°–æ–±—ã—Ç–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        self.cursor.execute("""
            SELECT 
                EXTRACT(dow FROM event_timestamp) as day_of_week,
                CASE EXTRACT(dow FROM event_timestamp)
                    WHEN 0 THEN '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                    WHEN 1 THEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
                    WHEN 2 THEN '–í—Ç–æ—Ä–Ω–∏–∫'
                    WHEN 3 THEN '–°—Ä–µ–¥–∞'
                    WHEN 4 THEN '–ß–µ—Ç–≤–µ—Ä–≥'
                    WHEN 5 THEN '–ü—è—Ç–Ω–∏—Ü–∞'
                    WHEN 6 THEN '–°—É–±–±–æ—Ç–∞'
                END as day_name,
                COUNT(*) as events
            FROM app_schema.events
            GROUP BY day_of_week, day_name
            ORDER BY day_of_week;
        """)
        
        print("   –°–æ–±—ã—Ç–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:")
        for row in self.cursor.fetchall():
            print(f"     {row[1]}: {row[2]} —Å–æ–±—ã—Ç–∏–π")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'basic_counts': {},
            'consistency': {},
            'quality': {},
            'recommendations': []
        }
        
        # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.cursor.execute("SELECT COUNT(*) FROM app_schema.users;")
        report['basic_counts']['users'] = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM app_schema.products;")
        report['basic_counts']['products'] = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM app_schema.events;")
        report['basic_counts']['events'] = self.cursor.fetchone()[0]
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if report['basic_counts']['events'] < 10000:
            report['recommendations'].append("–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π")
        
        if report['basic_counts']['users'] < 500:
            report['recommendations'].append("–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open('data-validation-report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data-validation-report.json")
        
        if report['recommendations']:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in report['recommendations']:
                print(f"   ‚Ä¢ {rec}")

    def run_validation(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        self.connect_to_db()
        
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            counts = self.validate_basic_counts()
            consistency = self.validate_data_consistency()
            quality = self.validate_data_quality()
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            self.analyze_user_behavior()
            self.analyze_products()
            self.analyze_temporal_patterns()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            self.generate_report()
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            print("\nüéØ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:")
            if consistency and quality:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                print("‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            
        finally:
            self.disconnect_from_db()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    db_config = {
        'host': os.getenv('POSTGRES_HOST', 'localhost'),
        'port': os.getenv('POSTGRES_PORT', '5432'),
        'database': os.getenv('POSTGRES_DB', 'customer_analyzer'),
        'user': os.getenv('POSTGRES_USER', 'postgres'),
        'password': os.getenv('POSTGRES_PASSWORD', 'postgres')
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫
    validator = DataValidator(db_config)
    validator.run_validation()


if __name__ == "__main__":
    main()
