#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
"""

import os
import sys
import json
import random
import psycopg2
from datetime import datetime, timedelta
from typing import List, Dict, Any
import numpy as np
from faker import Faker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Faker –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω
fake = Faker('ru_RU')
Faker.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
np.random.seed(42)
random.seed(42)

class TestDataGenerator:
    def __init__(self, db_config: Dict[str, str]):
        self.db_config = db_config
        self.connection = None
        self.cursor = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        self.config = {
            'users_count': 1000,
            'products_count': 150,
            'events_count': 50000,
            'categories': [
                '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–û–¥–µ–∂–¥–∞', '–ö–Ω–∏–≥–∏', '–î–æ–º –∏ —Å–∞–¥', '–°–ø–æ—Ä—Ç',
                '–ö—Ä–∞—Å–æ—Ç–∞', '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
                '–ó–¥–æ—Ä–æ–≤—å–µ', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã'
            ],
            'event_types': ['view', 'add_to_cart', 'purchase', 'bot_command', 'click', 'scroll'],
            'bot_commands': ['/start', '/help', '/recommendations', '/profile', '/settings']
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        self.user_behavior_stats = {
            'active_users_ratio': 0.7,  # 70% –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            'purchase_conversion_rate': 0.15,  # 15% –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ‚Üí –ø–æ–∫—É–ø–∫–∞
            'cart_conversion_rate': 0.3,  # 30% –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ‚Üí –∫–æ—Ä–∑–∏–Ω–∞
            'bot_usage_rate': 0.4,  # 40% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç –±–æ—Ç–∞
            'session_duration_minutes': (5, 45),  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
            'events_per_session': (3, 25)  # –°–æ–±—ã—Ç–∏—è –≤ —Å–µ—Å—Å–∏–∏
        }

    def connect_to_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = psycopg2.connect(**self.db_config)
            self.cursor = self.connection.cursor()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            sys.exit(1)

    def disconnect_from_db(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

    def generate_users(self) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {self.config['users_count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        users = []
        used_telegram_ids = set()
        
        for i in range(self.config['users_count']):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ Telegram ID
            while True:
                telegram_id = fake.random_int(min=100000000, max=999999999)
                if telegram_id not in used_telegram_ids:
                    used_telegram_ids.add(telegram_id)
                    break
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            username = fake.user_name() if random.random() < 0.6 else None
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞)
            registration_date = fake.date_time_between(
                start_date='-2y',
                end_date='now'
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_data = {
                'age': fake.random_int(min=18, max=65),
                'city': fake.city(),
                'interests': random.sample(
                    self.config['categories'], 
                    k=random.randint(1, 4)
                ),
                'preferred_price_range': random.choice([
                    'budget', 'mid-range', 'premium'
                ]),
                'notification_preferences': {
                    'email': random.choice([True, False]),
                    'telegram': True,  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
                    'sms': random.choice([True, False])
                }
            }
            
            user = {
                'telegram_id': telegram_id,
                'first_name': fake.first_name(),
                'last_name': fake.last_name(),
                'username': username,
                'registration_date': registration_date,
                'profile_data': json.dumps(profile_data, ensure_ascii=False)
            }
            users.append(user)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return users

    def generate_products(self) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {self.config['products_count']} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        
        products = []
        
        for i in range(self.config['products_count']):
            category = random.choice(self.config['categories'])
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            product_names = {
                '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': ['–°–º–∞—Ä—Ç—Ñ–æ–Ω', '–ü–ª–∞–Ω—à–µ—Ç', '–ù–æ—É—Ç–±—É–∫', '–ù–∞—É—à–Ω–∏–∫–∏', '–ö–∞–º–µ—Ä–∞'],
                '–û–¥–µ–∂–¥–∞': ['–§—É—Ç–±–æ–ª–∫–∞', '–î–∂–∏–Ω—Å—ã', '–ü–ª–∞—Ç—å–µ', '–ö—É—Ä—Ç–∫–∞', '–û–±—É–≤—å'],
                '–ö–Ω–∏–≥–∏': ['–†–æ–º–∞–Ω', '–£—á–µ–±–Ω–∏–∫', '–î–µ—Ç–µ–∫—Ç–∏–≤', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è'],
                '–î–æ–º –∏ —Å–∞–¥': ['–°—Ç–æ–ª', '–°—Ç—É–ª', '–î–∏–≤–∞–Ω', '–õ–∞–º–ø–∞', '–ì–æ—Ä—à–æ–∫'],
                '–°–ø–æ—Ä—Ç': ['–ö—Ä–æ—Å—Å–æ–≤–∫–∏', '–ú—è—á', '–ì–∞–Ω—Ç–µ–ª–∏', '–í–µ–ª–æ—Å–∏–ø–µ–¥', '–õ—ã–∂–∏'],
                '–ö—Ä–∞—Å–æ—Ç–∞': ['–ö—Ä–µ–º', '–®–∞–º–ø—É–Ω—å', '–ü–æ–º–∞–¥–∞', '–î—É—Ö–∏', '–ú–∞—Å–∫–∞'],
                '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã': ['–ú–∞—Å–ª–æ', '–§–∏–ª—å—Ç—Ä', '–®–∏–Ω—ã', '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä', '–§–∞—Ä—ã'],
                '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': ['–ò–≥—Ä—É—à–∫–∞', '–ö–æ–ª—è—Å–∫–∞', '–ü–µ–ª–µ–Ω–∫–∏', '–ü–∏—Ç–∞–Ω–∏–µ', '–û–¥–µ–∂–¥–∞'],
                '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è': ['–•–ª–µ–±', '–ú–æ–ª–æ–∫–æ', '–ú—è—Å–æ', '–û–≤–æ—â–∏', '–§—Ä—É–∫—Ç—ã'],
                '–ó–¥–æ—Ä–æ–≤—å–µ': ['–í–∏—Ç–∞–º–∏–Ω—ã', '–¢–µ—Ä–º–æ–º–µ—Ç—Ä', '–¢–æ–Ω–æ–º–µ—Ç—Ä', '–ú–∞—Å–∫–∞', '–°–ø—Ä–µ–π'],
                '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['–ò–≥—Ä–∞', '–ü–∞–∑–ª', '–ö–Ω–∏–≥–∞', '–§–∏–ª—å–º', '–ú—É–∑—ã–∫–∞'],
                '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã': ['–†—É—á–∫–∞', '–ë–ª–æ–∫–Ω–æ—Ç', '–ü–∞–ø–∫–∞', '–°–∫–æ–±—ã', '–°—Ç–µ–ø–ª–µ—Ä']
            }
            
            base_name = random.choice(product_names.get(category, ['–¢–æ–≤–∞—Ä']))
            name = f"{base_name} {fake.word().capitalize()} {fake.random_int(min=1, max=999)}"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            price_ranges = {
                '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': (5000, 150000),
                '–û–¥–µ–∂–¥–∞': (500, 15000),
                '–ö–Ω–∏–≥–∏': (100, 2000),
                '–î–æ–º –∏ —Å–∞–¥': (1000, 50000),
                '–°–ø–æ—Ä—Ç': (800, 25000),
                '–ö—Ä–∞—Å–æ—Ç–∞': (200, 8000),
                '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã': (500, 30000),
                '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': (300, 12000),
                '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è': (50, 2000),
                '–ó–¥–æ—Ä–æ–≤—å–µ': (100, 5000),
                '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': (200, 5000),
                '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã': (50, 1500)
            }
            
            min_price, max_price = price_ranges.get(category, (100, 5000))
            price = round(random.uniform(min_price, max_price), 2)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            description = fake.text(max_nb_chars=200)
            
            # –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è content-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            attributes = {
                'brand': fake.company(),
                'color': random.choice(['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ó–µ–ª–µ–Ω—ã–π', '–ß–µ—Ä–Ω—ã–π', '–ë–µ–ª—ã–π', '–°–µ—Ä—ã–π']),
                'material': random.choice(['–ü–ª–∞—Å—Ç–∏–∫', '–ú–µ—Ç–∞–ª–ª', '–¢–∫–∞–Ω—å', '–ö–æ–∂–∞', '–°—Ç–µ–∫–ª–æ', '–î–µ—Ä–µ–≤–æ']),
                'size': random.choice(['XS', 'S', 'M', 'L', 'XL', 'XXL']) if category == '–û–¥–µ–∂–¥–∞' else None,
                'weight': round(random.uniform(0.1, 50), 2),
                'rating': round(random.uniform(3.0, 5.0), 1),
                'in_stock': random.choice([True, False]),
                'tags': random.sample([
                    '–ø–æ–ø—É–ª—è—Ä–Ω—ã–π', '–Ω–æ–≤–∏–Ω–∫–∞', '—Å–∫–∏–¥–∫–∞', '–ø—Ä–µ–º–∏—É–º', '—ç–∫–æ', '—Å—Ç–∏–ª—å–Ω—ã–π',
                    '—É–¥–æ–±–Ω—ã–π', '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–¥–æ—Å—Ç—É–ø–Ω—ã–π', '–º–æ–¥–Ω—ã–π'
                ], k=random.randint(1, 3))
            }
            
            # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            attributes = {k: v for k, v in attributes.items() if v is not None}
            
            product = {
                'name': name,
                'category': category,
                'price': price,
                'description': description,
                'attributes': json.dumps(attributes, ensure_ascii=False)
            }
            products.append(product)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        return products

    def generate_events(self, users: List[Dict], products: List[Dict]) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {self.config['events_count']} —Å–æ–±—ã—Ç–∏–π...")
        
        events = []
        active_users = random.sample(
            users, 
            int(len(users) * self.user_behavior_stats['active_users_ratio'])
        )
        
        event_id = 1
        current_date = datetime.now()
        
        for user in active_users:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            num_sessions = random.randint(1, 15)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞
            
            for session in range(num_sessions):
                # –î–∞—Ç–∞ —Å–µ—Å—Å–∏–∏ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞)
                session_date = fake.date_time_between(
                    start_date=user['registration_date'],
                    end_date=current_date
                )
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ —Å–µ—Å—Å–∏–∏
                events_in_session = random.randint(*self.user_behavior_stats['events_per_session'])
                
                # –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                session_products = random.sample(products, min(events_in_session, len(products)))
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –≤ —Å–µ—Å—Å–∏–∏
                session_events = []
                cart_items = []  # –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
                purchased_items = []  # –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                
                for i, product in enumerate(session_products):
                    # –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏
                    event_time = session_date + timedelta(
                        minutes=random.randint(0, self.user_behavior_stats['session_duration_minutes'][1])
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
                    if i == 0:
                        event_type = 'view'  # –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
                    else:
                        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
                        if random.random() < self.user_behavior_stats['cart_conversion_rate']:
                            if product not in cart_items:
                                event_type = 'add_to_cart'
                                cart_items.append(product)
                            else:
                                event_type = 'view'  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                        elif random.random() < self.user_behavior_stats['purchase_conversion_rate']:
                            if product in cart_items:
                                event_type = 'purchase'
                                purchased_items.append(product)
                                cart_items.remove(product)
                            else:
                                event_type = 'view'
                        else:
                            event_type = random.choice(['view', 'click', 'scroll'])
                    
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤ —Å–æ–±—ã—Ç–∏—è
                    properties = {}
                    
                    if event_type == 'purchase':
                        properties = {
                            'amount': product['price'],
                            'quantity': random.randint(1, 3),
                            'payment_method': random.choice(['card', 'cash', 'online']),
                            'discount': round(random.uniform(0, 0.3), 2) if random.random() < 0.3 else 0
                        }
                    elif event_type == 'view':
                        properties = {
                            'duration_seconds': random.randint(5, 300),
                            'scroll_depth': random.uniform(0, 1),
                            'source': random.choice(['search', 'recommendation', 'category', 'direct'])
                        }
                    elif event_type == 'add_to_cart':
                        properties = {
                            'quantity': random.randint(1, 5),
                            'source': random.choice(['product_page', 'search_results', 'recommendations'])
                        }
                    
                    event = {
                        'user_id': user['user_id'],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        'product_id': product['product_id'],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                        'event_type': event_type,
                        'event_timestamp': event_time,
                        'properties': json.dumps(properties, ensure_ascii=False) if properties else None
                    }
                    
                    session_events.append(event)
                    events.append(event)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if random.random() < self.user_behavior_stats['bot_usage_rate']:
                    bot_commands_count = random.randint(1, 5)
                    for _ in range(bot_commands_count):
                        command = random.choice(self.config['bot_commands'])
                        bot_event_time = session_date + timedelta(minutes=random.randint(0, 30))
                        
                        bot_event = {
                            'user_id': user['user_id'],
                            'product_id': None,
                            'event_type': 'bot_command',
                            'event_timestamp': bot_event_time,
                            'properties': json.dumps({
                                'command': command,
                                'response_time_ms': random.randint(100, 2000)
                            }, ensure_ascii=False)
                        }
                        events.append(bot_event)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        return events

    def insert_users(self, users: List[Dict[str, Any]]):
        """–í—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –í—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        insert_query = """
        INSERT INTO app_schema.users (telegram_id, first_name, last_name, username, registration_date, profile_data)
        VALUES (%(telegram_id)s, %(first_name)s, %(last_name)s, %(username)s, %(registration_date)s, %(profile_data)s)
        RETURNING user_id;
        """
        
        for user in users:
            self.cursor.execute(insert_query, user)
            user_id = self.cursor.fetchone()[0]
            user['user_id'] = user_id
        
        self.connection.commit()
        print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def insert_products(self, products: List[Dict[str, Any]]):
        """–í—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –í—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        insert_query = """
        INSERT INTO app_schema.products (name, category, price, description, attributes)
        VALUES (%(name)s, %(category)s, %(price)s, %(description)s, %(attributes)s)
        RETURNING product_id;
        """
        
        for product in products:
            self.cursor.execute(insert_query, product)
            product_id = self.cursor.fetchone()[0]
            product['product_id'] = product_id
        
        self.connection.commit()
        print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

    def insert_events(self, events: List[Dict[str, Any]]):
        """–í—Å—Ç–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –í—Å—Ç–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        insert_query = """
        INSERT INTO app_schema.events (user_id, product_id, event_type, event_timestamp, properties)
        VALUES (%(user_id)s, %(product_id)s, %(event_type)s, %(event_timestamp)s, %(properties)s);
        """
        
        # –í—Å—Ç–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        batch_size = 1000
        for i in range(0, len(events), batch_size):
            batch = events[i:i + batch_size]
            self.cursor.executemany(insert_query, batch)
            self.connection.commit()
            print(f"   –í—Å—Ç–∞–≤–ª–µ–Ω–æ {min(i + batch_size, len(events))}/{len(events)} —Å–æ–±—ã—Ç–∏–π")
        
        print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")

    def validate_data(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        self.cursor.execute("SELECT COUNT(*) FROM app_schema.users;")
        users_count = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM app_schema.products;")
        products_count = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM app_schema.events;")
        events_count = self.cursor.fetchone()[0]
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
        print(f"   –ü—Ä–æ–¥—É–∫—Ç—ã: {products_count}")
        print(f"   –°–æ–±—ã—Ç–∏—è: {events_count}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        self.cursor.execute("""
            SELECT COUNT(*) FROM app_schema.events e 
            LEFT JOIN app_schema.users u ON e.user_id = u.user_id 
            WHERE u.user_id IS NULL;
        """)
        orphan_events = self.cursor.fetchone()[0]
        
        self.cursor.execute("""
            SELECT COUNT(*) FROM app_schema.events e 
            LEFT JOIN app_schema.products p ON e.product_id = p.product_id 
            WHERE e.product_id IS NOT NULL AND p.product_id IS NULL;
        """)
        orphan_product_events = self.cursor.fetchone()[0]
        
        if orphan_events == 0 and orphan_product_events == 0:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
        else:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {orphan_events} —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {orphan_product_events} —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

    def generate_all_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        self.connect_to_db()
        
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            print("üîÑ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            self.cursor.execute("DELETE FROM app_schema.events;")
            self.cursor.execute("DELETE FROM app_schema.user_metrics;")
            self.cursor.execute("DELETE FROM app_schema.users;")
            self.cursor.execute("DELETE FROM app_schema.products;")
            self.connection.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            users = self.generate_users()
            self.insert_users(users)
            
            products = self.generate_products()
            self.insert_products(products)
            
            events = self.generate_events(users, products)
            self.insert_events(events)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            self.validate_data()
            
            print("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.connection.rollback()
            raise
        finally:
            self.disconnect_from_db()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    db_config = {
        'host': os.getenv('POSTGRES_HOST', 'localhost'),
        'port': os.getenv('POSTGRES_PORT', '5432'),
        'database': os.getenv('POSTGRES_DB', 'customer_analyzer'),
        'user': os.getenv('POSTGRES_USER', 'postgres'),
        'password': os.getenv('POSTGRES_PASSWORD', 'postgres')
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫
    generator = TestDataGenerator(db_config)
    generator.generate_all_data()


if __name__ == "__main__":
    main()
