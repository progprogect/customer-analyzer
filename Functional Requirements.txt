### **Документ функциональных требований (Functional Requirements Document)**

**Название системы:** Система аналитики и персонализированных рекомендаций
**Версия:** 1.0
**Дата:** 17.09.2025

### 1\. Введение

Этот документ описывает функциональные требования к программному обеспечению для системы аналитики пользовательского поведения и выдачи персонализированных рекомендаций. Система предназначена для сбора и анализа данных о поведении пользователей, применения моделей машинного обучения для прогнозирования и сегментации, а также для автоматической отправки рекомендаций через Telegram-бота.

**Целевая аудитория документа:**

  * Менеджеры проекта
  * Разработчики (Backend, Frontend, Data Science)
  * QA-инженеры

### 2\. Глоссарий

| Термин | Определение |
| :--- | :--- |
| **Пользователь** | Конечный клиент, взаимодействующий с продуктом/сервисом и Telegram-ботом. |
| **Событие** | Любое действие пользователя, которое отслеживается системой (например, просмотр товара, покупка, клик). |
| **Сегмент** | Группа пользователей, объединенных общими поведенческими характеристиками. |
| **Churn (Отток)** | Вероятность того, что пользователь прекратит использовать сервис в определенный период. |
| **LTV (Lifetime Value)** | Пожизненная ценность клиента; прогнозируемый доход, который клиент принесет за все время взаимодействия с сервисом. |
| **Дашборд** | Интерактивная веб-панель для администраторов и аналитиков системы. |
| **Администратор/Аналитик**| Внутренний пользователь системы, имеющий доступ к дашборду для анализа данных и управления моделями. |

### 3\. Роли пользователей

1.  **Пользователь (клиент):** Взаимодействует с системой через Telegram-бота, получает рекомендации и уведомления.
2.  **Администратор/Аналитик:** Использует веб-интерфейс (дашборд) для мониторинга метрик, анализа сегментов, просмотра результатов работы ML-моделей и настройки системы.
3.  **Система (автоматизированные процессы):** Выполняет фоновые задачи по сбору данных, обучению моделей и расчету метрик.

### 4\. Функциональные требования

#### **FR-1: Сбор и интеграция данных**

  * **FR-1.1: Подключение к базе данных**

      * Система должна обеспечивать стабильное и безопасное подключение к базе данных PostgreSQL.
      * Параметры подключения (хост, порт, имя пользователя, пароль, имя БД) должны храниться в защищенном конфигурационном файле.

  * **FR-1.2: Сбор исторических данных**

      * Система должна иметь возможность выполнять ETL-процессы (Extract, Transform, Load) для загрузки и обработки исторических данных о пользователях, продуктах и их взаимодействиях из основной БД.

  * **FR-1.3: Интеграция с Telegram Bot API**

      * Система должна быть интегрирована с Telegram Bot API для получения входящих сообщений и команд от пользователей.
      * Все взаимодействия пользователя с ботом (нажатия кнопок, отправка сообщений) должны логироваться в базу данных как события.

  * **FR-1.4: Хранение данных**

      * Система должна хранить обработанные данные в PostgreSQL в соответствии с предопределенной схемой (см. Приложение А). Это включает таблицы пользователей, событий, продуктов, а также результаты расчетов (сегменты, LTV, прогнозы).

-----

#### **FR-2: Продвинутая аналитика и Машинное обучение**

  * **FR-2.1: Сегментация пользователей**

      * **FR-2.1.1:** Система должна позволять Администратору запускать процесс кластеризации пользователей на основе их поведенческих данных (например, частота покупок, средний чек, просмотренные категории).
      * **FR-2.1.2:** Система должна поддерживать как минимум два алгоритма кластеризации: K-means и DBSCAN.
      * **FR-2.1.3:** Результат сегментации (ID сегмента) должен сохраняться в профиле каждого пользователя в БД.
      * **FR-2.1.4:** В дашборде должен быть раздел для визуализации сегментов и просмотра их характеристик (размер, ключевые метрики).

  * **FR-2.2: Предиктивная модель вероятности покупки**

      * **FR-2.2.1:** Система должна ежедневно (или по настраиваемому расписанию) запускать модель машинного обучения (Random Forest или XGBoost) для прогнозирования вероятности совершения покупки каждым активным пользователем в течение следующих 30 дней.
      * **FR-2.2.2:** Рассчитанная вероятность (скор от 0 до 1) должна сохраняться в профиле пользователя.

  * **FR-2.3: Рекомендательная система**

      * **FR-2.3.1:** Система должна генерировать персональные рекомендации продуктов для пользователей, используя гибридный подход:
          * **Collaborative Filtering:** На основе анализа поведения похожих пользователей ("пользователи, купившие товар А, также покупали товар Б").
          * **Content-based Filtering:** На основе атрибутов товаров, которые пользователь ранее просматривал или покупал ("вам понравился смартфон X, возможно, вам понравится смартфон Y с похожими характеристиками").
      * **FR-2.3.2:** Список сгенерированных рекомендаций должен храниться в БД и быть доступен для отправки через Telegram-бота.

  * **FR-2.4: Модель предсказания оттока (Churn Prediction)**

      * **FR-2.4.1:** Система должна по расписанию рассчитывать вероятность оттока для каждого пользователя.
      * **FR-2.4.2:** Рассчитанная вероятность оттока должна сохраняться в профиле пользователя и использоваться для запуска кампаний по удержанию.

  * **FR-2.5: Анализ эластичности спроса по цене**

      * **FR-2.5.1:** В дашборде должен быть аналитический инструмент, который позволяет построить график зависимости объема продаж от цены на выбранный товар или категорию товаров на основе исторических данных.

-----

#### **FR-3: Автоматизация и интеллектуальные функции**

  * **FR-3.1: Обнаружение аномалий (Anomaly Detection)**

      * **FR-3.1.1:** Система должна в фоновом режиме отслеживать поток пользовательских событий для выявления аномального поведения (например, резкий всплеск заказов от одного пользователя, попытки подбора пароля, использование скриптов).
      * **FR-3.1.2:** При обнаружении аномалии система должна отправлять уведомление Администратору (например, по email или в специальный Telegram-чат).

  * **FR-3.2: Расчет LTV (Lifetime Value)**

      * **FR-3.2.1:** Система должна автоматически по расписанию рассчитывать исторический и прогнозный LTV для каждого пользователя.
      * **FR-3.2.2:** Рассчитанное значение LTV должно сохраняться в профиле пользователя и отображаться в дашборде.

-----

#### **FR-4: Пользовательский интерфейс и визуализация**

  * **FR-4.1: Интерактивный дашборд (Web-интерфейс)**

      * **FR-4.1.1:** Доступ к дашборду должен быть защищен системой аутентификации (логин/пароль) для Администраторов.
      * **FR-4.1.2:** Дизайн дашборда должен быть адаптивным (mobile-responsive) для корректного отображения на экранах различных устройств.
      * **FR-4.1.3:** Главная страница дашборда должна отображать ключевые метрики:
          * Общее количество пользователей.
          * Количество активных пользователей за период.
          * Динамика выручки.
          * Средний LTV.
          * Распределение пользователей по сегментам (круговая диаграмма).
      * **FR-4.1.4:** Дашборд должен содержать раздел для просмотра списка пользователей с возможностью поиска, фильтрации и просмотра детальной карточки пользователя (профиль, история событий, персональные прогнозы и рекомендации).
      * **FR-4.1.5:** Все графики и диаграммы в дашборде должны быть интерактивными (возможность наведения для получения деталей, фильтрация по датам).

  * **FR-4.2: Интерфейс Telegram-бота**

      * **FR-4.2.1:** Бот должен предоставлять пользователям меню с основными командами (например, `/start`, `/help`, `/recommendations`).
      * **FR-4.2.2:** При отправке рекомендаций бот должен использовать **inline-кнопки** для удобного взаимодействия (например, "Подробнее", "Добавить в корзину", "Показать еще").
      * **FR-4.2.3:** Система должна корректно обрабатывать **callback-запросы**, поступающие от нажатия inline-кнопок.
      * **FR-4.2.4:** Бот должен поддерживать отправку автоматизированных, триггерных сообщений. Например:
          * Приветственное сообщение новому пользователю.
          * Напоминание о брошенной корзине.
          * Персональное спецпредложение для пользователей с высоким LTV.
          * Реактивационное сообщение для пользователей с высокой вероятностью оттока.

### Приложение А: Примерная структура данных (PostgreSQL)

Для тестирования и разработки предлагается использовать следующую базовую структуру таблиц.

**1. `users` - Пользователи**

```sql
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    telegram_id BIGINT UNIQUE NOT NULL,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    username VARCHAR(255),
    registration_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    -- Дополнительные демографические данные
    profile_data JSONB
);
```

**2. `products` - Каталог продуктов/услуг**

```sql
CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(100),
    price NUMERIC(10, 2),
    description TEXT,
    -- Атрибуты для content-based рекомендаций
    attributes JSONB
);
```

**3. `events` - События пользователей**

```sql
CREATE TABLE events (
    event_id BIGSERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    product_id INTEGER REFERENCES products(product_id),
    event_type VARCHAR(50) NOT NULL, -- 'view', 'add_to_cart', 'purchase', 'bot_command'
    event_timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    -- Дополнительные параметры события (сумма покупки, текст команды)
    properties JSONB
);
```

**4. `user_metrics` - Рассчитанные метрики и прогнозы**

```sql
CREATE TABLE user_metrics (
    user_id INTEGER PRIMARY KEY REFERENCES users(user_id),
    segment_id INTEGER,
    ltv NUMERIC(12, 2),
    churn_probability REAL, -- от 0 до 1
    purchase_probability_30d REAL, -- от 0 до 1
    last_updated TIMESTAMP WITH TIME ZONE
);
```