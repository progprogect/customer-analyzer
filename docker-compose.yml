version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: customer-analyzer-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-customer_analyzer}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - customer-analyzer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: customer-analyzer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - customer-analyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: customer-analyzer-backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-customer_analyzer}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
      - API_PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - customer-analyzer-network
    command: npm run dev

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: customer-analyzer-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - customer-analyzer-network
    command: npm start

  # ML Services
  ml-services:
    build:
      context: ./ml-services
      dockerfile: Dockerfile
    container_name: customer-analyzer-ml
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-customer_analyzer}
      - ML_API_PORT=8002
    ports:
      - "8002:8002"
    volumes:
      - ./ml-services:/app
      - ml_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - customer-analyzer-network
    command: python app.py

  # Telegram Bot
  telegram-bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile.dev
    container_name: customer-analyzer-bot
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
      - API_URL=http://backend:8000
    volumes:
      - ./telegram-bot:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - customer-analyzer-network
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  ml_models:

networks:
  customer-analyzer-network:
    driver: bridge
