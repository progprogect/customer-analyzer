import { createApp, initializeApp, gracefulShutdown } from './app';
import { config } from './config';
import { logger } from './utils/logger';

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function startServer(): Promise<void> {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await initializeApp();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const app = createApp();
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = app.listen(config.server.port, () => {
      logger.info(`üöÄ Server running on port ${config.server.port}`);
      logger.info(`üìä Environment: ${config.env}`);
      logger.info(`üîó Health check: http://localhost:${config.server.port}/health`);
      logger.info(`üìñ API docs: http://localhost:${config.server.port}/api-docs`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      logger.info('Received SIGINT, shutting down gracefully...');
      server.close(() => {
        gracefulShutdown();
      });
    });

    process.on('SIGTERM', async () => {
      logger.info('Received SIGTERM, shutting down gracefully...');
      server.close(() => {
        gracefulShutdown();
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    process.on('uncaughtException', (error) => {
      logger.error('Uncaught Exception:', error);
      gracefulShutdown();
    });

    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
      gracefulShutdown();
    });

  } catch (error) {
    logger.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
  startServer();
}

export { startServer };
